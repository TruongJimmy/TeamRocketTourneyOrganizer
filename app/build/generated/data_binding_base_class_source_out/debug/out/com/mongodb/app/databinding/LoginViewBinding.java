// Generated by view binder compiler. Do not edit!
package com.mongodb.app.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Button;
import android.widget.EditText;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.appcompat.widget.AppCompatButton;
import androidx.constraintlayout.widget.ConstraintLayout;
import androidx.viewbinding.ViewBinding;
import com.mongodb.app.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class LoginViewBinding implements ViewBinding {
  @NonNull
  private final ConstraintLayout rootView;

  @NonNull
  public final AppCompatButton buttonLogin;

  @NonNull
  public final Button buttonNotify;

  @NonNull
  public final EditText inputPassword;

  @NonNull
  public final EditText inputUsername;

  @NonNull
  public final Button registerButton;

  private LoginViewBinding(@NonNull ConstraintLayout rootView, @NonNull AppCompatButton buttonLogin,
      @NonNull Button buttonNotify, @NonNull EditText inputPassword,
      @NonNull EditText inputUsername, @NonNull Button registerButton) {
    this.rootView = rootView;
    this.buttonLogin = buttonLogin;
    this.buttonNotify = buttonNotify;
    this.inputPassword = inputPassword;
    this.inputUsername = inputUsername;
    this.registerButton = registerButton;
  }

  @Override
  @NonNull
  public ConstraintLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static LoginViewBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static LoginViewBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.login_view, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static LoginViewBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.button_login;
      AppCompatButton buttonLogin = rootView.findViewById(id);
      if (buttonLogin == null) {
        break missingId;
      }

      id = R.id.buttonNotify;
      Button buttonNotify = rootView.findViewById(id);
      if (buttonNotify == null) {
        break missingId;
      }

      id = R.id.input_password;
      EditText inputPassword = rootView.findViewById(id);
      if (inputPassword == null) {
        break missingId;
      }

      id = R.id.input_username;
      EditText inputUsername = rootView.findViewById(id);
      if (inputUsername == null) {
        break missingId;
      }

      id = R.id.registerButton;
      Button registerButton = rootView.findViewById(id);
      if (registerButton == null) {
        break missingId;
      }

      return new LoginViewBinding((ConstraintLayout) rootView, buttonLogin, buttonNotify,
          inputPassword, inputUsername, registerButton);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
