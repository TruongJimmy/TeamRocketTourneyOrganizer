// Generated by view binder compiler. Do not edit!
package com.mongodb.app.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ImageView;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.cardview.widget.CardView;
import androidx.constraintlayout.widget.ConstraintLayout;
import androidx.viewbinding.ViewBinding;
import com.mongodb.app.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class CardViewBinding implements ViewBinding {
  @NonNull
  private final CardView rootView;

  @NonNull
  public final CardView cardView;

  @NonNull
  public final TextView itemDetail;

  @NonNull
  public final TextView itemGameName;

  @NonNull
  public final TextView itemHost;

  @NonNull
  public final ImageView itemImage;

  @NonNull
  public final TextView itemStartTime;

  @NonNull
  public final TextView itemTitle;

  @NonNull
  public final ConstraintLayout relativeLayout;

  private CardViewBinding(@NonNull CardView rootView, @NonNull CardView cardView,
      @NonNull TextView itemDetail, @NonNull TextView itemGameName, @NonNull TextView itemHost,
      @NonNull ImageView itemImage, @NonNull TextView itemStartTime, @NonNull TextView itemTitle,
      @NonNull ConstraintLayout relativeLayout) {
    this.rootView = rootView;
    this.cardView = cardView;
    this.itemDetail = itemDetail;
    this.itemGameName = itemGameName;
    this.itemHost = itemHost;
    this.itemImage = itemImage;
    this.itemStartTime = itemStartTime;
    this.itemTitle = itemTitle;
    this.relativeLayout = relativeLayout;
  }

  @Override
  @NonNull
  public CardView getRoot() {
    return rootView;
  }

  @NonNull
  public static CardViewBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static CardViewBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.card_view, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static CardViewBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      CardView cardView = (CardView) rootView;

      id = R.id.itemDetail;
      TextView itemDetail = rootView.findViewById(id);
      if (itemDetail == null) {
        break missingId;
      }

      id = R.id.itemGameName;
      TextView itemGameName = rootView.findViewById(id);
      if (itemGameName == null) {
        break missingId;
      }

      id = R.id.itemHost;
      TextView itemHost = rootView.findViewById(id);
      if (itemHost == null) {
        break missingId;
      }

      id = R.id.itemImage;
      ImageView itemImage = rootView.findViewById(id);
      if (itemImage == null) {
        break missingId;
      }

      id = R.id.itemStartTime;
      TextView itemStartTime = rootView.findViewById(id);
      if (itemStartTime == null) {
        break missingId;
      }

      id = R.id.itemTitle;
      TextView itemTitle = rootView.findViewById(id);
      if (itemTitle == null) {
        break missingId;
      }

      id = R.id.relativeLayout;
      ConstraintLayout relativeLayout = rootView.findViewById(id);
      if (relativeLayout == null) {
        break missingId;
      }

      return new CardViewBinding((CardView) rootView, cardView, itemDetail, itemGameName, itemHost,
          itemImage, itemStartTime, itemTitle, relativeLayout);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
